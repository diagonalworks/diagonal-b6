syntax = "proto3";

package api;

import "geometry.proto";
import "features.proto";

option go_package = "diagonal.works/b6/proto";

message CollectionProto {
    repeated LiteralNodeProto keys = 2;
    repeated LiteralNodeProto values = 4;
}

message PairProto {
    LiteralNodeProto first = 1;
    LiteralNodeProto second = 2;
}

message ModifiedFeaturesProto {
    repeated features.FeatureIDProto ids = 1;
}

message AppliedChangeProto {
    repeated features.FeatureIDProto original = 1;
    repeated features.FeatureIDProto modified = 2;
}

message NodeProto {
    oneof node {
        string symbol = 1;
        LiteralNodeProto literal = 2;
        CallNodeProto call = 3;
        LambdaNodeProto lambda_ = 4;
    }
    int32 begin = 6;
    int32 end = 7;
}

message LiteralNodeProto {
    oneof value {
        bool nilValue = 1;
        bool boolValue = 2;
        string stringValue = 3;
        int64 intValue = 4;
        double floatValue = 5;
        CollectionProto collectionValue = 6;
        PairProto pairValue = 7;
        features.FeatureProto featureValue = 8;
        QueryProto queryValue = 9;
        features.FeatureIDProto featureIDValue = 10;
        geometry.PointProto pointValue = 11;
        geometry.PolylineProto pathValue = 12;
        geometry.MultiPolygonProto areaValue = 13;
        AppliedChangeProto appliedChangeValue = 14;
        bytes geoJSONValue = 15; // gzipped
        features.TagProto tagValue = 16;
    }
}

message CallNodeProto {
    NodeProto function = 1;
    repeated NodeProto args = 2;
    bool pipelined = 3;
}

message LambdaNodeProto {
    repeated string args = 1;
    NodeProto node = 2;
}

message KeyQueryProto {
    string key = 1;
}

message KeyValueQueryProto {
    string key = 1;
    string value = 2;
}

message TypedQueryProto {
    features.FeatureType type = 1;
    QueryProto query = 2;
}

message QueriesProto {
    repeated QueryProto queries = 1;
}

message AllQueryProto {}

message EmptyQueryProto {}

message CapProto {
    geometry.PointProto center = 1;
    double radiusMeters = 2;
}

message S2CellIDsProto {
    repeated uint64 s2CellIDs = 1;
}

message QueryProto {
    oneof query {
        AllQueryProto all = 1;
        EmptyQueryProto empty = 2;
        string keyed = 3;
        features.TagProto tagged = 4;
        TypedQueryProto typed = 5;
        QueriesProto intersection = 6;
        QueriesProto union = 7;
        CapProto intersectsCap = 8;
        features.FeatureIDProto intersectsFeature = 9;
        geometry.PointProto intersectsPoint = 10;
        geometry.PolylineProto intersectsPolyline = 11;
        geometry.MultiPolygonProto intersectsMultiPolygon = 12;
        S2CellIDsProto intersectsCells = 13;
        S2CellIDsProto mightIntersect = 14;
    }
}

message FindFeatureByIDRequestProto {
    features.FeatureIDProto id = 1;
}

message FindFeatureByIDResponseProto {
    features.FeatureProto feature = 1;
}

message FindFeaturesRequestProto {
    QueryProto query = 1;
}

message FindFeaturesResponseProto {
    repeated features.FeatureProto features = 1;
}

message ModifyTagsRequestProto {
    features.FeatureIDProto id = 1;
    repeated features.TagProto tags = 2;
}

message ModifyTagsBatchRequestProto {
    repeated ModifyTagsRequestProto requests = 1;
}

message ModifyTagsBatchResponseProto {
}

message EvaluateRequestProto {
    NodeProto request = 1;
    string version = 2;
}

message EvaluateResponseProto {
    NodeProto result = 1;
}

service B6 {
    rpc Evaluate(EvaluateRequestProto) returns (EvaluateResponseProto);
}