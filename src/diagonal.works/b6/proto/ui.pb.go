// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: ui.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MapLayerPosition int32

const (
	MapLayerPosition_MapLayerPositionEnd       MapLayerPosition = 0
	MapLayerPosition_MapLayerPositionRoads     MapLayerPosition = 1
	MapLayerPosition_MapLayerPositionBuildings MapLayerPosition = 2
)

// Enum value maps for MapLayerPosition.
var (
	MapLayerPosition_name = map[int32]string{
		0: "MapLayerPositionEnd",
		1: "MapLayerPositionRoads",
		2: "MapLayerPositionBuildings",
	}
	MapLayerPosition_value = map[string]int32{
		"MapLayerPositionEnd":       0,
		"MapLayerPositionRoads":     1,
		"MapLayerPositionBuildings": 2,
	}
)

func (x MapLayerPosition) Enum() *MapLayerPosition {
	p := new(MapLayerPosition)
	*p = x
	return p
}

func (x MapLayerPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapLayerPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_ui_proto_enumTypes[0].Descriptor()
}

func (MapLayerPosition) Type() protoreflect.EnumType {
	return &file_ui_proto_enumTypes[0]
}

func (x MapLayerPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapLayerPosition.Descriptor instead.
func (MapLayerPosition) EnumDescriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{0}
}

type UIRequestProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node         *NodeProto      `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Expression   string          `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Root         *FeatureIDProto `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	Locked       bool            `protobuf:"varint,4,opt,name=locked,proto3" json:"locked,omitempty"`
	LogEvent     string          `protobuf:"bytes,5,opt,name=logEvent,proto3" json:"logEvent,omitempty"`
	LogMapCenter *PointProto     `protobuf:"bytes,6,opt,name=logMapCenter,proto3" json:"logMapCenter,omitempty"`
	LogMapZoom   float32         `protobuf:"fixed32,7,opt,name=logMapZoom,proto3" json:"logMapZoom,omitempty"`
	Session      uint64          `protobuf:"varint,8,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *UIRequestProto) Reset() {
	*x = UIRequestProto{}
	mi := &file_ui_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UIRequestProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIRequestProto) ProtoMessage() {}

func (x *UIRequestProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIRequestProto.ProtoReflect.Descriptor instead.
func (*UIRequestProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{0}
}

func (x *UIRequestProto) GetNode() *NodeProto {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *UIRequestProto) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *UIRequestProto) GetRoot() *FeatureIDProto {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *UIRequestProto) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *UIRequestProto) GetLogEvent() string {
	if x != nil {
		return x.LogEvent
	}
	return ""
}

func (x *UIRequestProto) GetLogMapCenter() *PointProto {
	if x != nil {
		return x.LogMapCenter
	}
	return nil
}

func (x *UIRequestProto) GetLogMapZoom() float32 {
	if x != nil {
		return x.LogMapZoom
	}
	return 0
}

func (x *UIRequestProto) GetSession() uint64 {
	if x != nil {
		return x.Session
	}
	return 0
}

type UIResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stack        *StackProto      `protobuf:"bytes,1,opt,name=stack,proto3" json:"stack,omitempty"`
	Node         *NodeProto       `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Expression   string           `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	Highlighted  *FeatureIDsProto `protobuf:"bytes,4,opt,name=highlighted,proto3" json:"highlighted,omitempty"`
	GeoJSON      []*GeoJSONProto  `protobuf:"bytes,5,rep,name=geoJSON,proto3" json:"geoJSON,omitempty"` // References geojson array in response
	Layers       []*MapLayerProto `protobuf:"bytes,7,rep,name=layers,proto3" json:"layers,omitempty"`
	MapCenter    *PointProto      `protobuf:"bytes,8,opt,name=mapCenter,proto3" json:"mapCenter,omitempty"`
	Locked       bool             `protobuf:"varint,9,opt,name=locked,proto3" json:"locked,omitempty"`
	ChipValues   []int32          `protobuf:"varint,10,rep,packed,name=chipValues,proto3" json:"chipValues,omitempty"`
	LogDetail    string           `protobuf:"bytes,11,opt,name=logDetail,proto3" json:"logDetail,omitempty"`
	TilesChanged bool             `protobuf:"varint,12,opt,name=tilesChanged,proto3" json:"tilesChanged,omitempty"`
}

func (x *UIResponseProto) Reset() {
	*x = UIResponseProto{}
	mi := &file_ui_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UIResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIResponseProto) ProtoMessage() {}

func (x *UIResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIResponseProto.ProtoReflect.Descriptor instead.
func (*UIResponseProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{1}
}

func (x *UIResponseProto) GetStack() *StackProto {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *UIResponseProto) GetNode() *NodeProto {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *UIResponseProto) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *UIResponseProto) GetHighlighted() *FeatureIDsProto {
	if x != nil {
		return x.Highlighted
	}
	return nil
}

func (x *UIResponseProto) GetGeoJSON() []*GeoJSONProto {
	if x != nil {
		return x.GeoJSON
	}
	return nil
}

func (x *UIResponseProto) GetLayers() []*MapLayerProto {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *UIResponseProto) GetMapCenter() *PointProto {
	if x != nil {
		return x.MapCenter
	}
	return nil
}

func (x *UIResponseProto) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *UIResponseProto) GetChipValues() []int32 {
	if x != nil {
		return x.ChipValues
	}
	return nil
}

func (x *UIResponseProto) GetLogDetail() string {
	if x != nil {
		return x.LogDetail
	}
	return ""
}

func (x *UIResponseProto) GetTilesChanged() bool {
	if x != nil {
		return x.TilesChanged
	}
	return false
}

type MapLayerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Q         string           `protobuf:"bytes,2,opt,name=q,proto3" json:"q,omitempty"`
	V         string           `protobuf:"bytes,3,opt,name=v,proto3" json:"v,omitempty"`
	Before    MapLayerPosition `protobuf:"varint,4,opt,name=before,proto3,enum=ui.MapLayerPosition" json:"before,omitempty"`
	Condition *ConditionProto  `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *MapLayerProto) Reset() {
	*x = MapLayerProto{}
	mi := &file_ui_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapLayerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLayerProto) ProtoMessage() {}

func (x *MapLayerProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLayerProto.ProtoReflect.Descriptor instead.
func (*MapLayerProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{2}
}

func (x *MapLayerProto) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MapLayerProto) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *MapLayerProto) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

func (x *MapLayerProto) GetBefore() MapLayerPosition {
	if x != nil {
		return x.Before
	}
	return MapLayerPosition_MapLayerPositionEnd
}

func (x *MapLayerProto) GetCondition() *ConditionProto {
	if x != nil {
		return x.Condition
	}
	return nil
}

type StackProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Substacks []*SubstackProto `protobuf:"bytes,1,rep,name=substacks,proto3" json:"substacks,omitempty"`
	Id        *FeatureIDProto  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StackProto) Reset() {
	*x = StackProto{}
	mi := &file_ui_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackProto) ProtoMessage() {}

func (x *StackProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackProto.ProtoReflect.Descriptor instead.
func (*StackProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{3}
}

func (x *StackProto) GetSubstacks() []*SubstackProto {
	if x != nil {
		return x.Substacks
	}
	return nil
}

func (x *StackProto) GetId() *FeatureIDProto {
	if x != nil {
		return x.Id
	}
	return nil
}

type SubstackProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines       []*LineProto `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	Collapsable bool         `protobuf:"varint,2,opt,name=collapsable,proto3" json:"collapsable,omitempty"`
}

func (x *SubstackProto) Reset() {
	*x = SubstackProto{}
	mi := &file_ui_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstackProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstackProto) ProtoMessage() {}

func (x *SubstackProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstackProto.ProtoReflect.Descriptor instead.
func (*SubstackProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{4}
}

func (x *SubstackProto) GetLines() []*LineProto {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *SubstackProto) GetCollapsable() bool {
	if x != nil {
		return x.Collapsable
	}
	return false
}

type LineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Line:
	//
	//	*LineProto_Value
	//	*LineProto_LeftRightValue
	//	*LineProto_Expression
	//	*LineProto_Tags
	//	*LineProto_HistogramBar
	//	*LineProto_Swatch
	//	*LineProto_Shell
	//	*LineProto_Choice
	//	*LineProto_Header
	//	*LineProto_Error
	//	*LineProto_Action
	//	*LineProto_Comparison
	Line isLineProto_Line `protobuf_oneof:"line"`
}

func (x *LineProto) Reset() {
	*x = LineProto{}
	mi := &file_ui_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineProto) ProtoMessage() {}

func (x *LineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineProto.ProtoReflect.Descriptor instead.
func (*LineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{5}
}

func (m *LineProto) GetLine() isLineProto_Line {
	if m != nil {
		return m.Line
	}
	return nil
}

func (x *LineProto) GetValue() *ValueLineProto {
	if x, ok := x.GetLine().(*LineProto_Value); ok {
		return x.Value
	}
	return nil
}

func (x *LineProto) GetLeftRightValue() *LeftRightValueLineProto {
	if x, ok := x.GetLine().(*LineProto_LeftRightValue); ok {
		return x.LeftRightValue
	}
	return nil
}

func (x *LineProto) GetExpression() *ExpressionLineProto {
	if x, ok := x.GetLine().(*LineProto_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *LineProto) GetTags() *TagsLineProto {
	if x, ok := x.GetLine().(*LineProto_Tags); ok {
		return x.Tags
	}
	return nil
}

func (x *LineProto) GetHistogramBar() *HistogramBarLineProto {
	if x, ok := x.GetLine().(*LineProto_HistogramBar); ok {
		return x.HistogramBar
	}
	return nil
}

func (x *LineProto) GetSwatch() *SwatchLineProto {
	if x, ok := x.GetLine().(*LineProto_Swatch); ok {
		return x.Swatch
	}
	return nil
}

func (x *LineProto) GetShell() *ShellLineProto {
	if x, ok := x.GetLine().(*LineProto_Shell); ok {
		return x.Shell
	}
	return nil
}

func (x *LineProto) GetChoice() *ChoiceLineProto {
	if x, ok := x.GetLine().(*LineProto_Choice); ok {
		return x.Choice
	}
	return nil
}

func (x *LineProto) GetHeader() *HeaderLineProto {
	if x, ok := x.GetLine().(*LineProto_Header); ok {
		return x.Header
	}
	return nil
}

func (x *LineProto) GetError() *ErrorLineProto {
	if x, ok := x.GetLine().(*LineProto_Error); ok {
		return x.Error
	}
	return nil
}

func (x *LineProto) GetAction() *ActionLineProto {
	if x, ok := x.GetLine().(*LineProto_Action); ok {
		return x.Action
	}
	return nil
}

func (x *LineProto) GetComparison() *ComparisonLineProto {
	if x, ok := x.GetLine().(*LineProto_Comparison); ok {
		return x.Comparison
	}
	return nil
}

type isLineProto_Line interface {
	isLineProto_Line()
}

type LineProto_Value struct {
	Value *ValueLineProto `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type LineProto_LeftRightValue struct {
	LeftRightValue *LeftRightValueLineProto `protobuf:"bytes,2,opt,name=leftRightValue,proto3,oneof"`
}

type LineProto_Expression struct {
	Expression *ExpressionLineProto `protobuf:"bytes,3,opt,name=expression,proto3,oneof"`
}

type LineProto_Tags struct {
	Tags *TagsLineProto `protobuf:"bytes,4,opt,name=tags,proto3,oneof"`
}

type LineProto_HistogramBar struct {
	HistogramBar *HistogramBarLineProto `protobuf:"bytes,5,opt,name=histogramBar,proto3,oneof"`
}

type LineProto_Swatch struct {
	Swatch *SwatchLineProto `protobuf:"bytes,6,opt,name=swatch,proto3,oneof"`
}

type LineProto_Shell struct {
	Shell *ShellLineProto `protobuf:"bytes,7,opt,name=shell,proto3,oneof"`
}

type LineProto_Choice struct {
	Choice *ChoiceLineProto `protobuf:"bytes,8,opt,name=choice,proto3,oneof"`
}

type LineProto_Header struct {
	Header *HeaderLineProto `protobuf:"bytes,9,opt,name=header,proto3,oneof"`
}

type LineProto_Error struct {
	Error *ErrorLineProto `protobuf:"bytes,10,opt,name=error,proto3,oneof"`
}

type LineProto_Action struct {
	Action *ActionLineProto `protobuf:"bytes,11,opt,name=action,proto3,oneof"`
}

type LineProto_Comparison struct {
	Comparison *ComparisonLineProto `protobuf:"bytes,12,opt,name=comparison,proto3,oneof"`
}

func (*LineProto_Value) isLineProto_Line() {}

func (*LineProto_LeftRightValue) isLineProto_Line() {}

func (*LineProto_Expression) isLineProto_Line() {}

func (*LineProto_Tags) isLineProto_Line() {}

func (*LineProto_HistogramBar) isLineProto_Line() {}

func (*LineProto_Swatch) isLineProto_Line() {}

func (*LineProto_Shell) isLineProto_Line() {}

func (*LineProto_Choice) isLineProto_Line() {}

func (*LineProto_Header) isLineProto_Line() {}

func (*LineProto_Error) isLineProto_Line() {}

func (*LineProto_Action) isLineProto_Line() {}

func (*LineProto_Comparison) isLineProto_Line() {}

type ValueLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atom            *AtomProto `protobuf:"bytes,1,opt,name=atom,proto3" json:"atom,omitempty"`
	ClickExpression *NodeProto `protobuf:"bytes,2,opt,name=clickExpression,proto3" json:"clickExpression,omitempty"`
}

func (x *ValueLineProto) Reset() {
	*x = ValueLineProto{}
	mi := &file_ui_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueLineProto) ProtoMessage() {}

func (x *ValueLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueLineProto.ProtoReflect.Descriptor instead.
func (*ValueLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{6}
}

func (x *ValueLineProto) GetAtom() *AtomProto {
	if x != nil {
		return x.Atom
	}
	return nil
}

func (x *ValueLineProto) GetClickExpression() *NodeProto {
	if x != nil {
		return x.ClickExpression
	}
	return nil
}

type LeftRightValueLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  []*ClickableAtomProto `protobuf:"bytes,1,rep,name=left,proto3" json:"left,omitempty"`
	Right *ClickableAtomProto   `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *LeftRightValueLineProto) Reset() {
	*x = LeftRightValueLineProto{}
	mi := &file_ui_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeftRightValueLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftRightValueLineProto) ProtoMessage() {}

func (x *LeftRightValueLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftRightValueLineProto.ProtoReflect.Descriptor instead.
func (*LeftRightValueLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{7}
}

func (x *LeftRightValueLineProto) GetLeft() []*ClickableAtomProto {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *LeftRightValueLineProto) GetRight() *ClickableAtomProto {
	if x != nil {
		return x.Right
	}
	return nil
}

type ClickableAtomProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atom            *AtomProto `protobuf:"bytes,1,opt,name=atom,proto3" json:"atom,omitempty"`
	ClickExpression *NodeProto `protobuf:"bytes,2,opt,name=clickExpression,proto3" json:"clickExpression,omitempty"`
}

func (x *ClickableAtomProto) Reset() {
	*x = ClickableAtomProto{}
	mi := &file_ui_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickableAtomProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickableAtomProto) ProtoMessage() {}

func (x *ClickableAtomProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickableAtomProto.ProtoReflect.Descriptor instead.
func (*ClickableAtomProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{8}
}

func (x *ClickableAtomProto) GetAtom() *AtomProto {
	if x != nil {
		return x.Atom
	}
	return nil
}

func (x *ClickableAtomProto) GetClickExpression() *NodeProto {
	if x != nil {
		return x.ClickExpression
	}
	return nil
}

type ExpressionLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ExpressionLineProto) Reset() {
	*x = ExpressionLineProto{}
	mi := &file_ui_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpressionLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionLineProto) ProtoMessage() {}

func (x *ExpressionLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionLineProto.ProtoReflect.Descriptor instead.
func (*ExpressionLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{9}
}

func (x *ExpressionLineProto) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type TagsLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*TagAtomProto `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TagsLineProto) Reset() {
	*x = TagsLineProto{}
	mi := &file_ui_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsLineProto) ProtoMessage() {}

func (x *TagsLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsLineProto.ProtoReflect.Descriptor instead.
func (*TagsLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{10}
}

func (x *TagsLineProto) GetTags() []*TagAtomProto {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TagAtomProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix          string     `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Key             string     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value           string     `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ClickExpression *NodeProto `protobuf:"bytes,4,opt,name=clickExpression,proto3" json:"clickExpression,omitempty"`
}

func (x *TagAtomProto) Reset() {
	*x = TagAtomProto{}
	mi := &file_ui_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagAtomProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagAtomProto) ProtoMessage() {}

func (x *TagAtomProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagAtomProto.ProtoReflect.Descriptor instead.
func (*TagAtomProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{11}
}

func (x *TagAtomProto) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *TagAtomProto) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TagAtomProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TagAtomProto) GetClickExpression() *NodeProto {
	if x != nil {
		return x.ClickExpression
	}
	return nil
}

type HistogramBarLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *AtomProto `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Value int32      `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Total int32      `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Index int32      `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *HistogramBarLineProto) Reset() {
	*x = HistogramBarLineProto{}
	mi := &file_ui_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramBarLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramBarLineProto) ProtoMessage() {}

func (x *HistogramBarLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramBarLineProto.ProtoReflect.Descriptor instead.
func (*HistogramBarLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{12}
}

func (x *HistogramBarLineProto) GetRange() *AtomProto {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *HistogramBarLineProto) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HistogramBarLineProto) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HistogramBarLineProto) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type SwatchLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *AtomProto `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Index int32      `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *SwatchLineProto) Reset() {
	*x = SwatchLineProto{}
	mi := &file_ui_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwatchLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwatchLineProto) ProtoMessage() {}

func (x *SwatchLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwatchLineProto.ProtoReflect.Descriptor instead.
func (*SwatchLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{13}
}

func (x *SwatchLineProto) GetLabel() *AtomProto {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *SwatchLineProto) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ShellLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Functions []string `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty"`
}

func (x *ShellLineProto) Reset() {
	*x = ShellLineProto{}
	mi := &file_ui_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellLineProto) ProtoMessage() {}

func (x *ShellLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellLineProto.ProtoReflect.Descriptor instead.
func (*ShellLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{14}
}

func (x *ShellLineProto) GetFunctions() []string {
	if x != nil {
		return x.Functions
	}
	return nil
}

type ChoiceLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *AtomProto   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Chips []*AtomProto `protobuf:"bytes,2,rep,name=chips,proto3" json:"chips,omitempty"`
}

func (x *ChoiceLineProto) Reset() {
	*x = ChoiceLineProto{}
	mi := &file_ui_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoiceLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceLineProto) ProtoMessage() {}

func (x *ChoiceLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceLineProto.ProtoReflect.Descriptor instead.
func (*ChoiceLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{15}
}

func (x *ChoiceLineProto) GetLabel() *AtomProto {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ChoiceLineProto) GetChips() []*AtomProto {
	if x != nil {
		return x.Chips
	}
	return nil
}

type ChoiceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipValues []int32    `protobuf:"varint,1,rep,packed,name=chipValues,proto3" json:"chipValues,omitempty"`
	Label      *AtomProto `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *ChoiceProto) Reset() {
	*x = ChoiceProto{}
	mi := &file_ui_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoiceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceProto) ProtoMessage() {}

func (x *ChoiceProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceProto.ProtoReflect.Descriptor instead.
func (*ChoiceProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{16}
}

func (x *ChoiceProto) GetChipValues() []int32 {
	if x != nil {
		return x.ChipValues
	}
	return nil
}

func (x *ChoiceProto) GetLabel() *AtomProto {
	if x != nil {
		return x.Label
	}
	return nil
}

type HeaderLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  *AtomProto `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Close  bool       `protobuf:"varint,2,opt,name=close,proto3" json:"close,omitempty"`
	Share  bool       `protobuf:"varint,3,opt,name=share,proto3" json:"share,omitempty"`
	Target bool       `protobuf:"varint,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *HeaderLineProto) Reset() {
	*x = HeaderLineProto{}
	mi := &file_ui_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderLineProto) ProtoMessage() {}

func (x *HeaderLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderLineProto.ProtoReflect.Descriptor instead.
func (*HeaderLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{17}
}

func (x *HeaderLineProto) GetTitle() *AtomProto {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *HeaderLineProto) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

func (x *HeaderLineProto) GetShare() bool {
	if x != nil {
		return x.Share
	}
	return false
}

func (x *HeaderLineProto) GetTarget() bool {
	if x != nil {
		return x.Target
	}
	return false
}

type ErrorLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorLineProto) Reset() {
	*x = ErrorLineProto{}
	mi := &file_ui_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorLineProto) ProtoMessage() {}

func (x *ErrorLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorLineProto.ProtoReflect.Descriptor instead.
func (*ErrorLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{18}
}

func (x *ErrorLineProto) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ActionLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atom            *AtomProto `protobuf:"bytes,1,opt,name=atom,proto3" json:"atom,omitempty"`
	ClickExpression *NodeProto `protobuf:"bytes,2,opt,name=clickExpression,proto3" json:"clickExpression,omitempty"`
	InContext       bool       `protobuf:"varint,3,opt,name=inContext,proto3" json:"inContext,omitempty"`
}

func (x *ActionLineProto) Reset() {
	*x = ActionLineProto{}
	mi := &file_ui_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionLineProto) ProtoMessage() {}

func (x *ActionLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionLineProto.ProtoReflect.Descriptor instead.
func (*ActionLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{19}
}

func (x *ActionLineProto) GetAtom() *AtomProto {
	if x != nil {
		return x.Atom
	}
	return nil
}

func (x *ActionLineProto) GetClickExpression() *NodeProto {
	if x != nil {
		return x.ClickExpression
	}
	return nil
}

func (x *ActionLineProto) GetInContext() bool {
	if x != nil {
		return x.InContext
	}
	return false
}

type ComparisonHistogramProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bars []*HistogramBarLineProto `protobuf:"bytes,1,rep,name=bars,proto3" json:"bars,omitempty"`
}

func (x *ComparisonHistogramProto) Reset() {
	*x = ComparisonHistogramProto{}
	mi := &file_ui_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonHistogramProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonHistogramProto) ProtoMessage() {}

func (x *ComparisonHistogramProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonHistogramProto.ProtoReflect.Descriptor instead.
func (*ComparisonHistogramProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{20}
}

func (x *ComparisonHistogramProto) GetBars() []*HistogramBarLineProto {
	if x != nil {
		return x.Bars
	}
	return nil
}

type ComparisonLineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baseline  *ComparisonHistogramProto   `protobuf:"bytes,1,opt,name=baseline,proto3" json:"baseline,omitempty"`
	Scenarios []*ComparisonHistogramProto `protobuf:"bytes,2,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
}

func (x *ComparisonLineProto) Reset() {
	*x = ComparisonLineProto{}
	mi := &file_ui_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonLineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonLineProto) ProtoMessage() {}

func (x *ComparisonLineProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonLineProto.ProtoReflect.Descriptor instead.
func (*ComparisonLineProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{21}
}

func (x *ComparisonLineProto) GetBaseline() *ComparisonHistogramProto {
	if x != nil {
		return x.Baseline
	}
	return nil
}

func (x *ComparisonLineProto) GetScenarios() []*ComparisonHistogramProto {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

type AtomProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Atom:
	//
	//	*AtomProto_Value
	//	*AtomProto_LabelledIcon
	//	*AtomProto_Download
	//	*AtomProto_Chip
	//	*AtomProto_Conditional
	Atom isAtomProto_Atom `protobuf_oneof:"atom"`
}

func (x *AtomProto) Reset() {
	*x = AtomProto{}
	mi := &file_ui_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtomProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomProto) ProtoMessage() {}

func (x *AtomProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomProto.ProtoReflect.Descriptor instead.
func (*AtomProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{22}
}

func (m *AtomProto) GetAtom() isAtomProto_Atom {
	if m != nil {
		return m.Atom
	}
	return nil
}

func (x *AtomProto) GetValue() string {
	if x, ok := x.GetAtom().(*AtomProto_Value); ok {
		return x.Value
	}
	return ""
}

func (x *AtomProto) GetLabelledIcon() *LabelledIconProto {
	if x, ok := x.GetAtom().(*AtomProto_LabelledIcon); ok {
		return x.LabelledIcon
	}
	return nil
}

func (x *AtomProto) GetDownload() string {
	if x, ok := x.GetAtom().(*AtomProto_Download); ok {
		return x.Download
	}
	return ""
}

func (x *AtomProto) GetChip() *ChipProto {
	if x, ok := x.GetAtom().(*AtomProto_Chip); ok {
		return x.Chip
	}
	return nil
}

func (x *AtomProto) GetConditional() *ConditionalProto {
	if x, ok := x.GetAtom().(*AtomProto_Conditional); ok {
		return x.Conditional
	}
	return nil
}

type isAtomProto_Atom interface {
	isAtomProto_Atom()
}

type AtomProto_Value struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type AtomProto_LabelledIcon struct {
	LabelledIcon *LabelledIconProto `protobuf:"bytes,2,opt,name=labelledIcon,proto3,oneof"`
}

type AtomProto_Download struct {
	Download string `protobuf:"bytes,3,opt,name=download,proto3,oneof"`
}

type AtomProto_Chip struct {
	Chip *ChipProto `protobuf:"bytes,4,opt,name=chip,proto3,oneof"`
}

type AtomProto_Conditional struct {
	Conditional *ConditionalProto `protobuf:"bytes,5,opt,name=conditional,proto3,oneof"`
}

func (*AtomProto_Value) isAtomProto_Atom() {}

func (*AtomProto_LabelledIcon) isAtomProto_Atom() {}

func (*AtomProto_Download) isAtomProto_Atom() {}

func (*AtomProto_Chip) isAtomProto_Atom() {}

func (*AtomProto_Conditional) isAtomProto_Atom() {}

type LabelledIconProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon  string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabelledIconProto) Reset() {
	*x = LabelledIconProto{}
	mi := &file_ui_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelledIconProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelledIconProto) ProtoMessage() {}

func (x *LabelledIconProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelledIconProto.ProtoReflect.Descriptor instead.
func (*LabelledIconProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{23}
}

func (x *LabelledIconProto) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *LabelledIconProto) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type ChipProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ChipProto) Reset() {
	*x = ChipProto{}
	mi := &file_ui_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChipProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChipProto) ProtoMessage() {}

func (x *ChipProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChipProto.ProtoReflect.Descriptor instead.
func (*ChipProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{24}
}

func (x *ChipProto) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChipProto) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ConditionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the chips specified in indices need to match
	// the respective value for the element to be rendered.
	Indices []int32 `protobuf:"varint,1,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Values  []int32 `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *ConditionProto) Reset() {
	*x = ConditionProto{}
	mi := &file_ui_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionProto) ProtoMessage() {}

func (x *ConditionProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionProto.ProtoReflect.Descriptor instead.
func (*ConditionProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{25}
}

func (x *ConditionProto) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *ConditionProto) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ConditionalProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*ConditionProto `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Atoms      []*AtomProto      `protobuf:"bytes,2,rep,name=atoms,proto3" json:"atoms,omitempty"`
}

func (x *ConditionalProto) Reset() {
	*x = ConditionalProto{}
	mi := &file_ui_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionalProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalProto) ProtoMessage() {}

func (x *ConditionalProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalProto.ProtoReflect.Descriptor instead.
func (*ConditionalProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{26}
}

func (x *ConditionalProto) GetConditions() []*ConditionProto {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ConditionalProto) GetAtoms() []*AtomProto {
	if x != nil {
		return x.Atoms
	}
	return nil
}

type GeoJSONProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *ConditionProto `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Index     int32           `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GeoJSONProto) Reset() {
	*x = GeoJSONProto{}
	mi := &file_ui_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoJSONProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoJSONProto) ProtoMessage() {}

func (x *GeoJSONProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoJSONProto.ProtoReflect.Descriptor instead.
func (*GeoJSONProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{27}
}

func (x *GeoJSONProto) GetCondition() *ConditionProto {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *GeoJSONProto) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type FeatureIDsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []string    `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Ids        []*IDsProto `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *FeatureIDsProto) Reset() {
	*x = FeatureIDsProto{}
	mi := &file_ui_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureIDsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureIDsProto) ProtoMessage() {}

func (x *FeatureIDsProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureIDsProto.ProtoReflect.Descriptor instead.
func (*FeatureIDsProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{28}
}

func (x *FeatureIDsProto) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *FeatureIDsProto) GetIds() []*IDsProto {
	if x != nil {
		return x.Ids
	}
	return nil
}

type IDsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IDsProto) Reset() {
	*x = IDsProto{}
	mi := &file_ui_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsProto) ProtoMessage() {}

func (x *IDsProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsProto.ProtoReflect.Descriptor instead.
func (*IDsProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{29}
}

func (x *IDsProto) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ComparisonRequestProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the analysis to run in different worlds
	Analysis *FeatureIDProto `protobuf:"bytes,1,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// The ID of the baseline world in which to run the analysis
	Baseline *FeatureIDProto `protobuf:"bytes,2,opt,name=baseline,proto3" json:"baseline,omitempty"`
	// The IDs of the scenario worlds in which to run the analysis
	Scenarios []*FeatureIDProto `protobuf:"bytes,3,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
}

func (x *ComparisonRequestProto) Reset() {
	*x = ComparisonRequestProto{}
	mi := &file_ui_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonRequestProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonRequestProto) ProtoMessage() {}

func (x *ComparisonRequestProto) ProtoReflect() protoreflect.Message {
	mi := &file_ui_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonRequestProto.ProtoReflect.Descriptor instead.
func (*ComparisonRequestProto) Descriptor() ([]byte, []int) {
	return file_ui_proto_rawDescGZIP(), []int{30}
}

func (x *ComparisonRequestProto) GetAnalysis() *FeatureIDProto {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *ComparisonRequestProto) GetBaseline() *FeatureIDProto {
	if x != nil {
		return x.Baseline
	}
	return nil
}

func (x *ComparisonRequestProto) GetScenarios() []*FeatureIDProto {
	if x != nil {
		return x.Scenarios
	}
	return nil
}

var File_ui_proto protoreflect.FileDescriptor

var file_ui_proto_rawDesc = []byte{
	0x0a, 0x08, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x75, 0x69, 0x1a, 0x09,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x55, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x4d, 0x61,
	0x70, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x61,
	0x70, 0x5a, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x4d, 0x61, 0x70, 0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xb7, 0x03, 0x0a, 0x0f, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x69, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x44, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x6f,
	0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x4a, 0x53,
	0x4f, 0x4e, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x69, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x09, 0x6d, 0x61, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x69,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x68, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0d,
	0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12,
	0x0c, 0x0a, 0x01, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x76, 0x12, 0x2c, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x75, 0x69, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x56, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x69, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x70, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xfa, 0x04, 0x0a, 0x09, 0x4c, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x69,
	0x2e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x75, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3f,
	0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x69, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x42, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x61, 0x72, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x75, 0x69, 0x2e, 0x53, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x73, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a,
	0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x75, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x69, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x69, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x42, 0x06,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x6d, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x74, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x61, 0x74, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x17, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x69,
	0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x71, 0x0a, 0x12, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x21, 0x0a, 0x04, 0x61, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x61,
	0x74, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a,
	0x13, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x41, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0c,
	0x54, 0x61, 0x67, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x15, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x42, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x23, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4c, 0x0a, 0x0f, 0x53, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x2e, 0x0a, 0x0e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x0f, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x69,
	0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x22, 0x52, 0x0a, 0x0b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x7a, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x26, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x0a,
	0x04, 0x61, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x69,
	0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x61, 0x74, 0x6f, 0x6d,
	0x12, 0x38, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x69, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x42, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x62,
	0x61, 0x72, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x75, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x73, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x75, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x74, 0x6f, 0x6d, 0x22, 0x3d, 0x0a, 0x11, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x68, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x61, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x75, 0x69, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x61,
	0x74, 0x6f, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x4a, 0x53, 0x4f, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x51, 0x0a, 0x0f,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75,
	0x69, 0x2e, 0x49, 0x44, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x1c, 0x0a, 0x08, 0x49, 0x44, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2a, 0x65, 0x0a,
	0x10, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x61,
	0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x61, 0x64, 0x73, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x10, 0x02, 0x42, 0x19, 0x5a, 0x17, 0x64, 0x69, 0x61, 0x67, 0x6f, 0x6e, 0x61, 0x6c,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x36, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ui_proto_rawDescOnce sync.Once
	file_ui_proto_rawDescData = file_ui_proto_rawDesc
)

func file_ui_proto_rawDescGZIP() []byte {
	file_ui_proto_rawDescOnce.Do(func() {
		file_ui_proto_rawDescData = protoimpl.X.CompressGZIP(file_ui_proto_rawDescData)
	})
	return file_ui_proto_rawDescData
}

var file_ui_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ui_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_ui_proto_goTypes = []any{
	(MapLayerPosition)(0),            // 0: ui.MapLayerPosition
	(*UIRequestProto)(nil),           // 1: ui.UIRequestProto
	(*UIResponseProto)(nil),          // 2: ui.UIResponseProto
	(*MapLayerProto)(nil),            // 3: ui.MapLayerProto
	(*StackProto)(nil),               // 4: ui.StackProto
	(*SubstackProto)(nil),            // 5: ui.SubstackProto
	(*LineProto)(nil),                // 6: ui.LineProto
	(*ValueLineProto)(nil),           // 7: ui.ValueLineProto
	(*LeftRightValueLineProto)(nil),  // 8: ui.LeftRightValueLineProto
	(*ClickableAtomProto)(nil),       // 9: ui.ClickableAtomProto
	(*ExpressionLineProto)(nil),      // 10: ui.ExpressionLineProto
	(*TagsLineProto)(nil),            // 11: ui.TagsLineProto
	(*TagAtomProto)(nil),             // 12: ui.TagAtomProto
	(*HistogramBarLineProto)(nil),    // 13: ui.HistogramBarLineProto
	(*SwatchLineProto)(nil),          // 14: ui.SwatchLineProto
	(*ShellLineProto)(nil),           // 15: ui.ShellLineProto
	(*ChoiceLineProto)(nil),          // 16: ui.ChoiceLineProto
	(*ChoiceProto)(nil),              // 17: ui.ChoiceProto
	(*HeaderLineProto)(nil),          // 18: ui.HeaderLineProto
	(*ErrorLineProto)(nil),           // 19: ui.ErrorLineProto
	(*ActionLineProto)(nil),          // 20: ui.ActionLineProto
	(*ComparisonHistogramProto)(nil), // 21: ui.ComparisonHistogramProto
	(*ComparisonLineProto)(nil),      // 22: ui.ComparisonLineProto
	(*AtomProto)(nil),                // 23: ui.AtomProto
	(*LabelledIconProto)(nil),        // 24: ui.LabelledIconProto
	(*ChipProto)(nil),                // 25: ui.ChipProto
	(*ConditionProto)(nil),           // 26: ui.ConditionProto
	(*ConditionalProto)(nil),         // 27: ui.ConditionalProto
	(*GeoJSONProto)(nil),             // 28: ui.GeoJSONProto
	(*FeatureIDsProto)(nil),          // 29: ui.FeatureIDsProto
	(*IDsProto)(nil),                 // 30: ui.IDsProto
	(*ComparisonRequestProto)(nil),   // 31: ui.ComparisonRequestProto
	(*NodeProto)(nil),                // 32: api.NodeProto
	(*FeatureIDProto)(nil),           // 33: api.FeatureIDProto
	(*PointProto)(nil),               // 34: geometry.PointProto
}
var file_ui_proto_depIdxs = []int32{
	32, // 0: ui.UIRequestProto.node:type_name -> api.NodeProto
	33, // 1: ui.UIRequestProto.root:type_name -> api.FeatureIDProto
	34, // 2: ui.UIRequestProto.logMapCenter:type_name -> geometry.PointProto
	4,  // 3: ui.UIResponseProto.stack:type_name -> ui.StackProto
	32, // 4: ui.UIResponseProto.node:type_name -> api.NodeProto
	29, // 5: ui.UIResponseProto.highlighted:type_name -> ui.FeatureIDsProto
	28, // 6: ui.UIResponseProto.geoJSON:type_name -> ui.GeoJSONProto
	3,  // 7: ui.UIResponseProto.layers:type_name -> ui.MapLayerProto
	34, // 8: ui.UIResponseProto.mapCenter:type_name -> geometry.PointProto
	0,  // 9: ui.MapLayerProto.before:type_name -> ui.MapLayerPosition
	26, // 10: ui.MapLayerProto.condition:type_name -> ui.ConditionProto
	5,  // 11: ui.StackProto.substacks:type_name -> ui.SubstackProto
	33, // 12: ui.StackProto.id:type_name -> api.FeatureIDProto
	6,  // 13: ui.SubstackProto.lines:type_name -> ui.LineProto
	7,  // 14: ui.LineProto.value:type_name -> ui.ValueLineProto
	8,  // 15: ui.LineProto.leftRightValue:type_name -> ui.LeftRightValueLineProto
	10, // 16: ui.LineProto.expression:type_name -> ui.ExpressionLineProto
	11, // 17: ui.LineProto.tags:type_name -> ui.TagsLineProto
	13, // 18: ui.LineProto.histogramBar:type_name -> ui.HistogramBarLineProto
	14, // 19: ui.LineProto.swatch:type_name -> ui.SwatchLineProto
	15, // 20: ui.LineProto.shell:type_name -> ui.ShellLineProto
	16, // 21: ui.LineProto.choice:type_name -> ui.ChoiceLineProto
	18, // 22: ui.LineProto.header:type_name -> ui.HeaderLineProto
	19, // 23: ui.LineProto.error:type_name -> ui.ErrorLineProto
	20, // 24: ui.LineProto.action:type_name -> ui.ActionLineProto
	22, // 25: ui.LineProto.comparison:type_name -> ui.ComparisonLineProto
	23, // 26: ui.ValueLineProto.atom:type_name -> ui.AtomProto
	32, // 27: ui.ValueLineProto.clickExpression:type_name -> api.NodeProto
	9,  // 28: ui.LeftRightValueLineProto.left:type_name -> ui.ClickableAtomProto
	9,  // 29: ui.LeftRightValueLineProto.right:type_name -> ui.ClickableAtomProto
	23, // 30: ui.ClickableAtomProto.atom:type_name -> ui.AtomProto
	32, // 31: ui.ClickableAtomProto.clickExpression:type_name -> api.NodeProto
	12, // 32: ui.TagsLineProto.tags:type_name -> ui.TagAtomProto
	32, // 33: ui.TagAtomProto.clickExpression:type_name -> api.NodeProto
	23, // 34: ui.HistogramBarLineProto.range:type_name -> ui.AtomProto
	23, // 35: ui.SwatchLineProto.label:type_name -> ui.AtomProto
	23, // 36: ui.ChoiceLineProto.label:type_name -> ui.AtomProto
	23, // 37: ui.ChoiceLineProto.chips:type_name -> ui.AtomProto
	23, // 38: ui.ChoiceProto.label:type_name -> ui.AtomProto
	23, // 39: ui.HeaderLineProto.title:type_name -> ui.AtomProto
	23, // 40: ui.ActionLineProto.atom:type_name -> ui.AtomProto
	32, // 41: ui.ActionLineProto.clickExpression:type_name -> api.NodeProto
	13, // 42: ui.ComparisonHistogramProto.bars:type_name -> ui.HistogramBarLineProto
	21, // 43: ui.ComparisonLineProto.baseline:type_name -> ui.ComparisonHistogramProto
	21, // 44: ui.ComparisonLineProto.scenarios:type_name -> ui.ComparisonHistogramProto
	24, // 45: ui.AtomProto.labelledIcon:type_name -> ui.LabelledIconProto
	25, // 46: ui.AtomProto.chip:type_name -> ui.ChipProto
	27, // 47: ui.AtomProto.conditional:type_name -> ui.ConditionalProto
	26, // 48: ui.ConditionalProto.conditions:type_name -> ui.ConditionProto
	23, // 49: ui.ConditionalProto.atoms:type_name -> ui.AtomProto
	26, // 50: ui.GeoJSONProto.condition:type_name -> ui.ConditionProto
	30, // 51: ui.FeatureIDsProto.ids:type_name -> ui.IDsProto
	33, // 52: ui.ComparisonRequestProto.analysis:type_name -> api.FeatureIDProto
	33, // 53: ui.ComparisonRequestProto.baseline:type_name -> api.FeatureIDProto
	33, // 54: ui.ComparisonRequestProto.scenarios:type_name -> api.FeatureIDProto
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_ui_proto_init() }
func file_ui_proto_init() {
	if File_ui_proto != nil {
		return
	}
	file_api_proto_init()
	file_geometry_proto_init()
	file_ui_proto_msgTypes[5].OneofWrappers = []any{
		(*LineProto_Value)(nil),
		(*LineProto_LeftRightValue)(nil),
		(*LineProto_Expression)(nil),
		(*LineProto_Tags)(nil),
		(*LineProto_HistogramBar)(nil),
		(*LineProto_Swatch)(nil),
		(*LineProto_Shell)(nil),
		(*LineProto_Choice)(nil),
		(*LineProto_Header)(nil),
		(*LineProto_Error)(nil),
		(*LineProto_Action)(nil),
		(*LineProto_Comparison)(nil),
	}
	file_ui_proto_msgTypes[22].OneofWrappers = []any{
		(*AtomProto_Value)(nil),
		(*AtomProto_LabelledIcon)(nil),
		(*AtomProto_Download)(nil),
		(*AtomProto_Chip)(nil),
		(*AtomProto_Conditional)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ui_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ui_proto_goTypes,
		DependencyIndexes: file_ui_proto_depIdxs,
		EnumInfos:         file_ui_proto_enumTypes,
		MessageInfos:      file_ui_proto_msgTypes,
	}.Build()
	File_ui_proto = out.File
	file_ui_proto_rawDesc = nil
	file_ui_proto_goTypes = nil
	file_ui_proto_depIdxs = nil
}
