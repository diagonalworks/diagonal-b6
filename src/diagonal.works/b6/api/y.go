// Code generated by goyacc shell.y. DO NOT EDIT.

//line shell.y:2

package api

import __yyfmt__ "fmt"

//line shell.y:3

import (
	"diagonal.works/b6"
)

//line shell.y:20
type yySymType struct {
	yys int
	e   b6.Expression
	es  []b6.Expression
}

const FLOAT = 57346
const INT = 57347
const FEATURE_ID = 57348
const SYMBOL = 57349
const STRING = 57350
const TAG_KEY = 57351
const ARROW = 57352

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"','",
	"'('",
	"')'",
	"'|'",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'='",
	"'&'",
	"':'",
	"FLOAT",
	"INT",
	"FEATURE_ID",
	"SYMBOL",
	"STRING",
	"TAG_KEY",
	"ARROW",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 35,
	14, 33,
	-2, 38,
	-1, 36,
	14, 34,
	-2, 39,
	-1, 37,
	14, 35,
	-2, 40,
	-1, 38,
	14, 36,
	-2, 42,
	-1, 39,
	14, 37,
	-2, 43,
}

const yyPrivate = 57344

const yyLast = 132

var yyAct = [...]int{
	11, 48, 34, 23, 2, 5, 19, 42, 32, 69,
	25, 3, 52, 55, 46, 10, 45, 7, 49, 50,
	44, 65, 59, 41, 21, 63, 51, 64, 25, 53,
	54, 62, 47, 39, 56, 38, 18, 67, 66, 17,
	27, 19, 18, 21, 61, 20, 13, 14, 15, 24,
	12, 16, 40, 36, 37, 31, 35, 16, 29, 68,
	60, 20, 73, 44, 44, 44, 44, 71, 83, 84,
	79, 80, 81, 82, 39, 78, 38, 77, 18, 1,
	26, 17, 20, 19, 85, 20, 28, 70, 13, 14,
	15, 4, 12, 16, 18, 22, 58, 17, 43, 19,
	18, 57, 33, 30, 13, 14, 15, 24, 12, 16,
	40, 75, 76, 72, 74, 16, 18, 9, 8, 6,
	0, 0, 0, 0, 0, 0, 40, 36, 37, 72,
	35, 16,
}

var yyPact = [...]int{
	73, -1000, 38, -1000, 31, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 76, -1000, -1000, 28, 37, 73, -4,
	73, 0, 89, -1000, 12, -1000, -3, 0, 9, 73,
	92, 12, -1000, 8, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 54, 33, 18, 14, 26, 25, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 73, -9, 78, -1000, 111, 95,
	-1000, -1000, -4, -4, -4, -4, 0, 0, 75, -1000,
	-1000, -1000, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 5, 119, 17, 11, 3, 4, 118, 117, 103,
	8, 102, 2, 15, 1, 0, 7, 98, 95, 86,
	79,
}

var yyR1 = [...]int{
	0, 20, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 3, 4, 4, 4,
	18, 18, 5, 5, 7, 7, 19, 19, 8, 9,
	9, 10, 10, 11, 11, 11, 11, 11, 12, 12,
	12, 12, 12, 12, 13, 15, 16, 16, 16, 16,
	16, 16, 17, 17, 17, 17, 14, 14,
}

var yyR2 = [...]int{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 1, 2, 1,
	2, 1, 1, 1, 5, 4, 1, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 1, 3, 1, 3, 1, 1,
}

var yyChk = [...]int{
	-1000, -20, -6, -4, 18, -1, -2, -3, -7, -8,
	-13, -15, 19, 15, 16, 17, 20, 8, 5, 10,
	7, 12, -18, -5, 18, -1, 4, 12, -19, 21,
	-9, 18, -10, -11, -12, 19, 16, 17, -3, -13,
	15, -6, -16, -17, -15, 20, 18, -4, -14, 18,
	19, -5, 15, -14, 21, 4, -6, 9, 4, 14,
	6, 11, 13, 7, 13, 7, 12, 12, -6, 18,
	9, -10, 18, -12, 19, 16, 17, -3, -13, -16,
	-16, -16, -16, -14, -14, 9,
}

var yyDef = [...]int{
	0, -2, 1, 3, 17, 19, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 0, 0, 0, 0,
	0, 0, 18, 21, 22, 23, 0, 0, 0, 0,
	0, 26, 29, 0, 32, -2, -2, -2, -2, -2,
	41, 0, 0, 46, 51, 52, 54, 2, 16, 56,
	57, 20, 14, 15, 0, 0, 0, 28, 0, 0,
	44, 45, 0, 0, 0, 0, 0, 0, 0, 27,
	25, 30, 0, 31, 38, 39, 40, 42, 43, 47,
	49, 48, 50, 53, 55, 24,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 13, 3,
	5, 6, 3, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 14, 3,
	3, 12, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 3, 11, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 8, 7, 9,
}

var yyTok2 = [...]int{
	2, 3, 15, 16, 17, 18, 19, 20, 21,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:32
		{
			yylex.(*lexer).Top = reduceRootCall(yyDollar[1].e, yylex.(*lexer))
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:38
		{
			yyVAL.e = reducePipeline(yyDollar[1].e, yyDollar[3].e, yylex.(*lexer))
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:57
		{
			yyVAL.e = reduceLatLng(yyDollar[1].e, yyDollar[3].e, yylex.(*lexer))
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:63
		{
			yyVAL.e = reduceTag(yyDollar[1].e, yyDollar[3].e, yylex.(*lexer))
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:67
		{
			yyVAL.e = reduceTag(yyDollar[1].e, yyDollar[3].e, yylex.(*lexer))
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:73
		{
			yyVAL.e = reduceCall(yyDollar[1].e, yylex.(*lexer))
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line shell.y:77
		{
			yyVAL.e = reduceCallWithArgs(yyDollar[1].e, yyDollar[2].es, yylex.(*lexer))
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line shell.y:84
		{
			yyVAL.es = reduceArgs(yyDollar[1].es, yyDollar[2].e)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:88
		{
			yyVAL.es = reduceArg(yyDollar[1].e)
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line shell.y:98
		{
			yyVAL.e = reduceLambda(yyDollar[2].es, yyDollar[4].e)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line shell.y:102
		{
			yyVAL.e = reduceLambdaWithoutArgs(yyDollar[3].e)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:108
		{
			yyVAL.es = reduceSymbolsSymbol(yyDollar[1].e)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:112
		{
			yyVAL.es = reduceSymbolsSymbols(yyDollar[1].es, yyDollar[3].e)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:118
		{
			yyVAL.e = reduceCollectionItems(yyDollar[2].e)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:124
		{
			yyVAL.e = reduceCollectionItemsKeyValue(yyDollar[1].e)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:128
		{
			yyVAL.e = reduceCollectionItemsItemsKeyValue(yyDollar[1].e, yyDollar[3].e)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:134
		{
			yyVAL.e = reduceCollectionKeyValue(yyDollar[1].e, yyDollar[3].e)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:138
		{
			yyVAL.e = reduceCollectionValueWithImplictKey(yyDollar[1].e)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:159
		{
			yyVAL.e = yyDollar[2].e
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:165
		{
			yyVAL.e = yyDollar[2].e
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:172
		{
			yyVAL.e = reduceAnd(yyDollar[1].e, yyDollar[3].e)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:176
		{
			yyVAL.e = reduceAnd(yyDollar[1].e, yyDollar[3].e)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:180
		{
			yyVAL.e = reduceOr(yyDollar[1].e, yyDollar[3].e)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:184
		{
			yyVAL.e = reduceOr(yyDollar[1].e, yyDollar[3].e)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:191
		{
			yyVAL.e = reduceTagKey(yyDollar[1].e)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:195
		{
			yyVAL.e = reduceTagKeyValue(yyDollar[1].e, yyDollar[3].e)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line shell.y:199
		{
			yyVAL.e = reduceTagKey(yyDollar[1].e)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line shell.y:203
		{
			yyVAL.e = reduceTagKeyValue(yyDollar[1].e, yyDollar[3].e)
		}
	}
	goto yystack /* stack new state and value */
}
