# Run the CI making use of nix to do all the building/testing.
name: "CI (nix)"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-test:
    name: "Build & Test"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        # This is required to get the git tags that are used by the Makefile
        # when computing versions.
        fetch-depth: 0

    - name: "Prepare nix"
      uses: cachix/install-nix-action@V27
      with:
        extra_nix_config: |
          accept-flake-config = true
          log-lines = 1000

    - name: Setup Cachix cache
      uses: cachix/cachix-action@v15
      with:
        name: diagonalworks
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - name: "Build the Nix packages"
      run: |
        nix build .
        nix build .#python312
        nix build .#b6-image
        nix build .#b6-minimal-image
        nix build .#frontend
        nix build .#frontend-with-scenarios=false,shell=false
        nix build .#frontend-with-scenarios=true,shell=true

    - name: "Test that the nix template works"
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        REPO: ${{ github.repository }}
      run: |
        export DIR=$(mktemp -d)

        # Update branch reference in the flake, so it depends on the present
        # PR/main version.
        sed -i "s|.*diagonal-b6.url = .*|diagonal-b6.url = \"github:$REPO/$BRANCH_NAME\";|g" \
                nix/templates/python-client/flake.nix

        nix flake new $DIR --template .

        # We should be able to import b6 in the devShell
        nix develop $DIR -c python -c 'import diagonal_b6'

    - name: "Test a few common entrypoints"
      run: |
        nix run .#b6 -- --help
        nix run .#b6-ingest-osm -- --help
        nix run .#b6-connect -- --help

    - name: "Test that the docker image can ingest, connect, run and the notebook example works"
      run: |
        nix build .#b6-image
        ./result | docker load

        # Ingest
        docker run \
          -v ./data:/data \
          --entrypoint b6-ingest-osm \
          b6 \
          --input /data/tests/camden.osm.pbf \
          --output /data/camden.index

        # Connect
        docker run \
          -v ./data:/data \
          --entrypoint b6-connect \
          b6 \
          --input /data/camden.index \
          --output /data/camden.connected.index

        # Run
        docker run \
          -d \
          -v ./data:/data \
          -p 8001:8001 \
          -p 8002:8002 \
          b6 \
          -world /data/camden.connected.index

        sleep 3

        curl --head localhost:8001

        # Let's also test the example notebook
        nix develop .#combined -c "ipython -c '%run ./python/docs/01_Search.ipynb'"
